syntax = "proto3";

option csharp_namespace = "Reflow.Api";

service ReflowApi {
  rpc CreateReflow (CreateReflowRequest) returns (CreateReflowReply);
  rpc UpdateReflow (UpdateReflowRequest) returns (UpdateReflowReply);
  rpc GetReflow (GetReflowRequest) returns (GetReflowReply);
  rpc DeleteReflow (DeleteReflowRequest) returns (DeleteReflowReply);
  rpc ResolvePipeline (ResolvePipelineRequest) returns (ResolvePipelineReply);
  rpc PreviewPipeline (PreviewPipelineRequest) returns (PreviewPipelineReply);
}

message DeleteReflowRequest {
  string data_node_id = 1;
}

message DeleteReflowReply {
}


message CreateReflowRequest {
  string data_node_id = 1;
  string scope_id= 2;
  string reflow_json = 3;
}

message CreateReflowReply {
}

message UpdateReflowRequest {
  string data_node_id = 1;
  string reflow_json = 2;
}

message UpdateReflowReply {
}

message GetReflowRequest {
  string data_node_id = 1;
  string scope_id= 3;
}

message GetReflowReply {
	string reflow_json = 1;
}

message PreviewPipelineRequest {
  string scope_id = 1;
  string pipeline_name = 2;
  string target_namespace = 3;
}

message PreviewPipelineReply {
  repeated PreviewAction actions = 1;
}

message PreviewAction {
	string origin_scope_id = 1;
	string origin_reflow_id = 2;
	string origin_target_namespace = 3;
	string action_namespace = 4;
	double priority = 5;
	bool async = 6;
	bool isRemoved = 7;
	string modifier = 8;
	map<string, string> params = 9;
	map<string, string> ui_params = 10;
	string id = 11;
  bool continue_on_error = 12;
  map<string, string> messages = 13;
}

message ResolvePipelineRequest {
  string scope_id = 1;
  string pipeline_name = 2;
  string target_namespace = 3;
}

message ResolvePipelineReply {
  repeated ResolvedAction actions = 1;
}

message ResolvedAction {
  string id = 1;
	string action_namespace = 4;
	double priority = 5;
	bool async = 6;
	map<string, string> params = 7;
	map<string, string> ui_params = 8;
  bool continue_on_error = 9;
  map<string, string> messages = 10;
}